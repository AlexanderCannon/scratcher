generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

enum UserRole {
    USER
    ADMIN
    EDITOR
    CONTRIBUTOR
    PREMIUM
}

model User {
    id        String    @id
    slug      String?   @unique
    email     String?   @unique
    bio       String?
    image     String?
    phone     String?
    role      UserRole  @default(USER)
    articles  Article[]
    comments  Comment[]
    following Follow[]  @relation("Follower")
    followers Follow[]  @relation("Following")
    Star      Star[]

    @@unique([id, slug])
    @@index([id])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Article {
    id         String     @id @default(cuid())
    title      String
    content    String     @db.Text
    image      String?
    intro      String?
    published  Boolean    @default(false)
    createdAt  DateTime   @default(now())
    updatedAt  DateTime   @updatedAt
    authorId   String
    slug       String     @unique
    categories Category[]
    comments   Comment[]
    Star       Star[]
    User       User?      @relation(fields: [userId], references: [id])
    userId     String?

    @@index([slug, title])
}

model Comment {
    id        String   @id @default(cuid())
    content   String
    authorId  String
    articleId String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    author    User     @relation(fields: [authorId], references: [id])
    article   Article  @relation(fields: [articleId], references: [id])
}

model Follow {
    id          String   @id @default(cuid())
    followerId  String
    followingId String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    follower    User     @relation("Follower", fields: [followerId], references: [id])
    following   User     @relation("Following", fields: [followingId], references: [id])

    @@unique([followerId, followingId])
}

model Star {
    id        String   @id @default(cuid())
    articleId String
    userId    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    article   Article  @relation(fields: [articleId], references: [id])
    owner     User     @relation(fields: [userId], references: [id])

    @@unique([articleId, userId])
}

model Category {
    id          String    @id @default(cuid())
    name        String    @unique
    slug        String    @unique
    description String?
    articles    Article[]

    @@index([slug, name])
}
