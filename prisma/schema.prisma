generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
    USER
    ADMIN
    EDITOR
    CONTRIBUTOR
    PREMIUM
}

model User {
    id            String    @id @default(cuid())
    username      String?   @unique
    slug          String?   @unique
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    phone         String?
    role          UserRole  @default(USER)
    accounts      Account[]
    sessions      Session[]
    articles      Article[]
    Comment       Comment[]
    Following     Follow[]  @relation("Follower")
    Followers     Follow[]  @relation("Following")
    Star          Star[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Article {
    id         String     @id @default(cuid())
    title      String
    content    String     @db.Text
    image      String?
    published  Boolean    @default(false)
    author     User       @relation(fields: [authorId], references: [id])
    categories Category[]
    authorId   String
    createdAt  DateTime   @default(now())
    updatedAt  DateTime   @updatedAt
    slug       String     @unique
    Comment    Comment[]
    Star       Star[]
}

model Comment {
    id        String   @id @default(cuid())
    content   String
    author    User     @relation(fields: [authorId], references: [id])
    article   Article  @relation(fields: [articleId], references: [id])
    authorId  String
    articleId String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Follow {
    id          String   @id @default(cuid())
    follower    User     @relation("Follower", fields: [followerId], references: [id])
    following   User     @relation("Following", fields: [followingId], references: [id])
    followerId  String
    followingId String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    @@unique([followerId, followingId])
}

model Star {
    id        String   @id @default(cuid())
    article   Article  @relation(fields: [articleId], references: [id])
    articleId String
    owner     User     @relation(fields: [userId], references: [id])
    userId    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([articleId, userId])
}

model Category {
    id          String    @id @default(cuid())
    name        String    @unique
    slug        String    @unique
    description String?
    articles    Article[]
}
